# -*- coding: utf-8 -*-
"""stream.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l5nTzVfFOvecO1SNzJ7Frdc-C5AHVbOF
"""

import streamlit as st
import pandas as pd
import torch
from transformers import pipeline, BertTokenizer, BertModel
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Load preprocessed news data
df = pd.read_csv("news_data_final.csv")

# Initialize sentiment analyzer and BERT model
analyzer = SentimentIntensityAnalyzer()
class NewsRecommender:
    def __init__(self):
        self.tokenizer = BertTokenizer.from_pretrained("sentence-transformers/all-MiniLM-L6-v2")
        self.model = BertModel.from_pretrained("sentence-transformers/all-MiniLM-L6-v2")

    def embed_text(self, text):
        tokens = self.tokenizer(text, return_tensors='pt', truncation=True, padding=True, max_length=512)
        with torch.no_grad():
            output = self.model(**tokens)
        return output.last_hidden_state[:, 0, :].numpy()

    def compute_similarity(self, user_article_index):
        embeddings = np.vstack(df["summary"].apply(self.embed_text).tolist())
        similarities = cosine_similarity([embeddings[user_article_index]], embeddings)[0]
        df["similarity"] = similarities
        return df.sort_values(by="similarity", ascending=False).head(5)

recommender = NewsRecommender()

# Streamlit UI
st.set_page_config(page_title="AI-Powered Personalized News", layout="wide")
st.title("📰 AI-Powered Personalized News Aggregator")

# Sidebar Filters
st.sidebar.header("🔍 Filter News")
category = st.sidebar.selectbox("Select Category", ["All"] + list(df["category"].unique()))
sentiment = st.sidebar.selectbox("Select Sentiment", ["All", "Positive", "Neutral", "Negative"])

# Filter Data
filtered_df = df.copy()
if category != "All":
    filtered_df = filtered_df[filtered_df["category"] == category]
if sentiment != "All":
    filtered_df = filtered_df[filtered_df["sentiment"] == sentiment]

# Display News
st.subheader("📰 Latest News")
for index, row in filtered_df.iterrows():
    st.markdown(f"### {row['title']}")
    st.write(f"**Category:** {row['category']}")
    st.write(f"**Sentiment:** {row['sentiment']}")
    st.write(f"**Summary:** {row['summary']}")
    if st.button(f"🔗 Recommend Similar News", key=index):
        recommendations = recommender.compute_similarity(index)
        st.subheader("🔗 Recommended Articles")
        for _, rec in recommendations.iterrows():
            st.write(f"- **{rec['title']}** ({rec['category']})")
    st.markdown("---")

st.sidebar.markdown("📌 **Tip:** Use filters to personalize your news feed!")